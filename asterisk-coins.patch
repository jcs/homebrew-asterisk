See https://github.com/jcs/payphone

--- a/main/dsp.c
+++ b/main/dsp.c
@@ -171,6 +171,7 @@
 
 #define DTMF_THRESHOLD		8.0e7
 #define TONE_THRESHOLD		7.8e7
+#define COIN_THRESHOLD		8.0e7
 
 #define DEF_DTMF_NORMAL_TWIST		6.31	 /* 8.0dB */
 #define DEF_RELAX_DTMF_NORMAL_TWIST	6.31	 /* 8.0dB */
@@ -187,6 +188,8 @@
 #define DTMF_RELATIVE_PEAK_COL	6.3     /* 8dB */
 #define DTMF_TO_TOTAL_ENERGY	42.0
 
+#define COIN_TO_TOTAL_ENERGY	42.0
+
 #define BELL_MF_THRESHOLD	1.6e9
 #define BELL_MF_TWIST		4.0     /* 6dB */
 #define BELL_MF_RELATIVE_PEAK	12.6    /* 11dB */
@@ -274,6 +277,8 @@
 {
 	goertzel_state_t row_out[4];
 	goertzel_state_t col_out[4];
+	goertzel_state_t coin_out_low;
+	goertzel_state_t coin_out_high;
 	int hits;			/* How many successive hits we have seen already */
 	int misses;			/* How many successive misses we have seen already */
 	int lasthit;
@@ -312,11 +317,14 @@
 static const float dtmf_col[] = {
 	1209.0, 1336.0, 1477.0, 1633.0
 };
+static const float coin_tone_low = 1700.0;
+static const float coin_tone_high = 2200.0;
 static const float mf_tones[] = {
 	700.0, 900.0, 1100.0, 1300.0, 1500.0, 1700.0
 };
 static const char dtmf_positions[] = "123A" "456B" "789C" "*0#D";
 static const char bell_mf_positions[] = "1247C-358A--69*---0B----#";
+static const char coin_char = '$';
 static int thresholds[THRESHOLD_MAX];
 static float dtmf_normal_twist;		/* AT&T = 8dB */
 static float dtmf_reverse_twist;	/* AT&T = 4dB */
@@ -516,6 +524,8 @@
 		goertzel_init(&s->row_out[i], dtmf_row[i], sample_rate);
 		goertzel_init(&s->col_out[i], dtmf_col[i], sample_rate);
 	}
+ 	goertzel_init(&s->coin_out_low, coin_tone_low, DTMF_GSIZE);
+ 	goertzel_init(&s->coin_out_high, coin_tone_high, DTMF_GSIZE);
 	s->lasthit = 0;
 	s->current_hit = 0;
 	s->energy = 0.0;
@@ -674,6 +684,8 @@
 {
 	float row_energy[4];
 	float col_energy[4];
+	float coin_low_energy;
+	float coin_high_energy;
 	int i;
 	int j;
 	int sample;
@@ -712,6 +724,8 @@
 			goertzel_sample(s->td.dtmf.col_out + 2, samp);
 			goertzel_sample(s->td.dtmf.row_out + 3, samp);
 			goertzel_sample(s->td.dtmf.col_out + 3, samp);
+			goertzel_sample(&s->td.dtmf.coin_out_low, samp);
+			goertzel_sample(&s->td.dtmf.coin_out_high, samp);
 		}
 		s->td.dtmf.current_sample += (limit - sample);
 		if (s->td.dtmf.current_sample < DTMF_GSIZE) {
@@ -737,6 +751,21 @@
 			row_energy[best_row], col_energy[best_col],
 			row_energy[best_row] + col_energy[best_col], s->td.dtmf.energy);
 		hit = 0;
+		/* Check for the coin: test if it's past threshold and it beats
+		 * all the DTMF frequency peaks. (No twist test.) */
+		coin_low_energy = goertzel_result (&s->td.dtmf.coin_out_low);
+		coin_high_energy = goertzel_result (&s->td.dtmf.coin_out_high);
+		if (coin_low_energy >= COIN_THRESHOLD &&
+		    coin_high_energy >= COIN_THRESHOLD &&
+		    coin_low_energy > row_energy[best_row] &&
+		    coin_high_energy > row_energy[best_row] &&
+		    coin_low_energy > col_energy[best_col] &&
+		    coin_high_energy > col_energy[best_col]) {
+			/* fraction of total energy test */
+			if ((coin_low_energy + coin_high_energy) >
+			    COIN_TO_TOTAL_ENERGY * s->td.dtmf.energy)
+				hit = coin_char;
+		}
 		/* Basic signal level test and the twist test */
 		if (row_energy[best_row] >= DTMF_THRESHOLD &&
 		    col_energy[best_col] >= DTMF_THRESHOLD &&
@@ -862,6 +891,8 @@
 			goertzel_reset(&s->td.dtmf.row_out[i]);
 			goertzel_reset(&s->td.dtmf.col_out[i]);
 		}
+		goertzel_reset(&s->td.dtmf.coin_out_low);
+		goertzel_reset(&s->td.dtmf.coin_out_high);
 		s->td.dtmf.energy = 0.0;
 		s->td.dtmf.current_sample = 0;
 	}
